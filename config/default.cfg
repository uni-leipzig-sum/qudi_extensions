#  Example Qudi configuration file.
#
#
#
# IMPORTANT: The format of every 'module.Class' line has changed on 28.6.2015.
# =========  The class name now needs to be explicitly given here in the config.
#		  the config line must the form package.module.Class.ClassName
global:
    # list of modules to load when starting
    startup: ['man', 'tasklogic']
    extensions:
        - '/opt/qudi_extensions'
    module_server:
        address: '0.0.0.0'
        port: 12345

    ## For controlling the appearance of the GUI:
    stylesheet: 'qdark.qss'

hardware:

    mycounter:
        module.Class: 'red_pitaya_counter.RedPitayaCounter'
        clock_frequency: 100
        ip_address: '192.168.1.250'
        remoteaccess: true

    myafm:
        module.Class: 'attocube_afm.AttocubeAfm'
        ip_address: '172.26.29.149'
        ip_port: 7000

    myodmrcounter:
        module.Class: 'red_pitaya_counter.RedPitayaCounter'
        clock_frequency: 100
        ip_address: '192.168.1.250'
        remoteaccess: true
    
    mylaser:
        module.Class: 'laser.laserquantum_laser.LaserQuantumLaser'
        psu: 'MPC6000'
        interface: 'ASRL/dev/ttyUSB0::INSTR'

    myconfocalscanner_attocube:
        module.Class: 'pci_6259_attocube.ConfocalScanner'
        ni_device_path: '/dev/comedi0'
        ni_comedi_calibration_file: '/opt/comedi/soft_calib_comedi0'
        ni_trigger_dio_subdevice: 2 # Use subdevice 2 for trigger (DIO)
        ni_trigger_dio_channel: 11  # Use channel 11 for trigger (DIO)
        ni_scanner_ao_subdevice: 1  # Use subdevice 1 for scanner output (AO)
        ni_scanner_ao_range: 0      # Use range [-10V, 10V] for scanner output
        temperature: 300            # Microscope temperature in (K)
        
        # DO NOT CHANGE THESE FACTORS!!! ONLY CHANGE THE TEMPERATURE
        # Calibration factors
        #   V = slope_voltage*T + offset_voltage
        #   m = slope_distance*T + offset_distance
        slope_voltage: -0.0152
        offset_voltage: 7.56
        slope_distance_x: 6.7567567567567567567e-8
        offset_distance_x: 0.000021729729729729
        slope_distance_y: 6.7567567567567567567e-8
        offset_distance_y: 0.000021729729729729
        slope_distance_z: 3.3783783783783783783e-9
        offset_distance_z: 1.986486486486486486e-6
        connect:
            counter_logic: 'counterlogic'
            afm_logic: 'afmlogic'

    myconfocalscanner_thorlabs:
        module.Class: 'pci_6259_attocube.ConfocalScanner'
        ni_device_path: '/dev/comedi1'
        ni_comedi_calibration_file: '/opt/comedi/soft_calib_comedi1'
        ni_trigger_dio_subdevice: 2 # Use subdevice 2 for trigger (DIO)
        ni_trigger_dio_channel: 11  # Use channel 11 for trigger (DIO)
        ni_scanner_ao_subdevice: 1  # Use subdevice 1 for scanner output (AO)
        ni_scanner_ao_range: 0      # Use range [-10V, 10V] for scanner output
        temperature: 300            # Microscope temperature in (K)
        
        # DO NOT CHANGE THESE FACTORS!!! ONLY CHANGE THE TEMPERATURE
        # Calibration factors
        #   V = slope_voltage*T + offset_voltage
        #   m = slope_distance*T + offset_distance
        slope_voltage: -0.0202666665
        offset_voltage: 10.08
        slope_distance_x: 6.7567567567567567567e-8
        offset_distance_x: 0.000021729729729729
        slope_distance_y: 6.7567567567567567567e-8
        offset_distance_y: 0.000021729729729729
        slope_distance_z: 3.3783783783783783783e-9
        offset_distance_z: 1.986486486486486486e-6
        connect:
            counter_logic: 'counterlogic'
            afm_logic: 'afmlogic'

    mymicrowave:
        module.Class: 'microwave_smw200a.MicrowaveSmw200a'
        ip_address: '192.168.1.2'
        remoteaccess: true

#    mymicrowave:
#        module.Class: 'microwave.mw_source_smw200A.MicrowaveSmw200A'
#        ip_address: ''
#        ip_timeout: 10

logic:
    counterlogic:
        module.Class: 'counter_logic.CounterLogic'
        connect:
            counter1: 'mycounter'
            savelogic: 'savelogic'

    afmlogic:
        module.Class: 'afm_logic.AfmLogic'
        connect:
            afm1: 'myafm'
            savelogic: 'savelogic'

    odmrlogic:
        module.Class: 'slow_odmr_logic.SlowODMRLogic'
        connect:
            odmrcounter: 'myodmrcounter'
            fitlogic: 'fitlogic'
            microwave1: 'mymicrowave'
            savelogic: 'savelogic'
            taskrunner: 'tasklogic'

    # this interfuse enables odmr if hardware trigger is not available or if
    # the counter has only two channels:
#    odmr_counter_microwave_interfuse:
#        module.Class: 'interfuse.odmr_counter_microwave_interfuse.ODMRCounterMicrowaveInterfuse'
#        connect:
#            slowcounter: 'mycounter'
#            microwave: 'mymicrowave'

    # this oder logic runs now with the interfuse
#    odmrlogic2:
#        module.Class: 'odmr_logic.ODMRLogic'
#        connect:
#            odmrcounter: 'odmr_counter_microwave_interfuse'
#            fitlogic: 'fitlogic'
#            microwave1: 'odmr_counter_microwave_interfuse'
#            savelogic: 'savelogic'
#            taskrunner: 'tasklogic'
#        scanmode: 'LIST'


    tasklogic:
        module.Class: 'taskrunner.TaskRunner'
        tasks:
        #    dummytask:
        #        module: 'dummy'
        #        preposttasks: ['ppdummy']
        #    dummyinterruptor:
        #        module: 'dummy'
        #        pausetasks: ['dummytask']
        #        preposttasks: ['ppdummy2']
        #    ppdummy:
        #        module: 'prepostdummy'
        #    ppdummy2:
        #        module: 'prepostdummy'
        #    scannerLocationRefocus:
        #        module: 'refocus'
        #        preposttasks: ['fliplasermirror']
        #        pausetasks: ['scan', 'odmr']
        #        needsmodules:
        #            optimizer: 'optimizerlogic'
        #        config:
        #            initial: [1, 1, 1]
        #    fliplasermirror:
        #        module: 'flipmirror'
        #        needsmodules:
        #            switchlogic: 'switch'
        #        config:
        #            sequence: [('mydummyswitch1', 1, True), ('mydummyswitch1', 2, True), ('mydummyswitch2', 1, True)]


    fitlogic:
        module.Class: 'fit_logic.FitLogic'

    savelogic:
        module.Class: 'save_logic.SaveLogic'
        win_data_directory: 'C:/Data'   # DO NOT CHANGE THE DIRECTORY HERE! ONLY IN THE CUSTOM FILE!
        unix_data_directory: '$HOME/Documents/QudiData/'
        log_into_daily_directory: True

    laserlogic:
        module.Class: 'laser_logic.LaserLogic'
        connect:
            laser: 'mylaser'

    scannerlogic_attocube:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse_attocube'
            savelogic: 'savelogic'

    scannerlogic_thorlabs:
        module.Class: 'confocal_logic.ConfocalLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse_thorlabs'
            savelogic: 'savelogic'

    scanner_tilt_interfuse_attocube:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'myconfocalscanner_attocube'

    scanner_tilt_interfuse_thorlabs:
        module.Class: 'interfuse.scanner_tilt_interfuse.ScannerTiltInterfuse'
        connect:
            confocalscanner1: 'myconfocalscanner_thorlabs'


    optimizerlogic_attocube:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse_attocube'
            fitlogic: 'fitlogic'

    optimizerlogic_thorlabs:
        module.Class: 'optimizer_logic.OptimizerLogic'
        connect:
            confocalscanner1: 'scanner_tilt_interfuse_thorlabs'
            fitlogic: 'fitlogic'

    poimanagerlogic_attocube:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic_attocube'
            optimizer1: 'optimizerlogic_attocube'
            savelogic: 'savelogic'

    poimanagerlogic_thorlabs:
        module.Class: 'poi_manager_logic.PoiManagerLogic'
        connect:
            scannerlogic: 'scannerlogic_thorlabs'
            optimizer1: 'optimizerlogic_thorlabs'
            savelogic: 'savelogic'


    kernellogic:
        module.Class: 'jupyterkernel.kernellogic.QudiKernelLogic'
        remoteaccess: True

gui:
    tray:
        module.Class: 'trayicon.TrayIcon'

    man:
        module.Class: 'manager.managergui.ManagerGui'

    counter:
        module.Class: 'counter.countergui.CounterGui'
        connect:
            counterlogic1: 'counterlogic'

    confocal_thorlabs:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic_thorlabs'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic_thorlabs'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        window_title: Confocal Thorlabs
        save_prefix: ConfocalThorlabs

    confocal_attocube:
        module.Class: 'confocal.confocalgui.ConfocalGui'
        connect:
            confocallogic1: 'scannerlogic_attocube'
            savelogic: 'savelogic'
            optimizerlogic1: 'optimizerlogic_attocube'
        fixed_aspect_ratio_xy: True
        fixed_aspect_ratio_depth: True
        slider_stepsize: 0.001  # in micrometer
        image_x_padding: 0.02
        image_y_padding: 0.02
        image_z_padding: 0.02
        window_title: Confocal Attocube
        save_prefix: ConfocalAttocube

    poimanager_attocube:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanagerlogic_attocube'
            confocallogic1: 'scannerlogic_attocube'
            
    poimanager_thorlabs:
        module.Class: 'poimanager.poimangui.PoiManagerGui'
        connect:
            poimanagerlogic1: 'poimanagerlogic_thorlabs'
            confocallogic1: 'scannerlogic_thorlabs'

    odmr:
        module.Class: 'odmr.odmrgui.ODMRGui'
        connect:
            odmrlogic1: 'odmrlogic'
            savelogic: 'savelogic'

    laser:
        module.Class: 'laser.laser.LaserGUI'
        connect:
            laserlogic: 'laserlogic'

    
